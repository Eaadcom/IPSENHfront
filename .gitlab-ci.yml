image: trion/ng-cli:11.2.6
stages:
  - building
  - testing
  - publishing
  - deploying

build:app:
  stage: building
  script:
    - ng version
    - npm ci
    - ng build --prod
  artifacts:
    paths:
      - dist/
    expire_in: 1 days
    when: always

test:unit:
  stage: testing
  image: efgiese/efgiese-angular-chrome-headless
  script:
    - npm -v
    - npm ci
    - npm run test-headless
  except:
    - development
    - master

test:lint:
  stage: testing
  script:
    - ng version
    - npm ci
    - ng lint ipsenh-frontend
  except:
    - development
    - master

publish:docker-staging:
  stage: publishing
  image: docker:19.03.12
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:19.03.0-dind
      command: ["--insecure-registry","gitlab.groep-7.xyz:5050"]
  script:
    - docker version
    - docker login -u $PROJECT_TOKEN_USERNAME -p $PROJECT_TOKEN_PASSWORD $CONTAINER_REGISTRY
    - docker build -t $TAG_STAGING:$CI_COMMIT_SHORT_SHA -t $TAG_STAGING:latest .
    - docker push $TAG_STAGING:$CI_COMMIT_SHORT_SHA
    - docker push $TAG_STAGING:latest
  only:
    - development
  environment:
    name: staging
    url: $STAGING_URL

publish:docker-production:
  stage: publishing
  image: docker:19.03.12
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:19.03.0-dind
      command: ["--insecure-registry","gitlab.groep-7.xyz:5050"]
  script:
    - docker version
    - docker login -u $PROJECT_TOKEN_USERNAME -p $PROJECT_TOKEN_PASSWORD $CONTAINER_REGISTRY
    - docker build -t $TAG_PRODUCTION:$CI_COMMIT_SHORT_SHA -t $TAG_PRODUCTION:latest .
    - docker push $TAG_PRODUCTION:$CI_COMMIT_SHORT_SHA
    - docker push $TAG_PRODUCTION:latest
  only:
    - master
  environment:
    name: production
    url: $PRODUCTION_URL

deploy:staging-app:
  stage: deploying
  image: alpine
  before_script:
    - apk add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  script:
    - ssh -o StrictHostKeychecking=no $SERVER_USER@$SERVER_IP "/bin/bash $DEPLOY_SCRIPT -u $PROJECT_TOKEN_USERNAME -p $PROJECT_TOKEN_PASSWORD -r $CONTAINER_REGISTRY -i $TAG_STAGING:latest -e staging -s staging_angular"
  only:
    - development
  environment:
    name: staging
    url: $STAGING_URL

deploy:production-app:
  stage: deploying
  image: alpine
  before_script:
    - apk add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  script:
    - ssh -o StrictHostKeychecking=no $SERVER_USER@$SERVER_IP "/bin/bash $DEPLOY_SCRIPT -u $PROJECT_TOKEN_USERNAME -p $PROJECT_TOKEN_PASSWORD -r $CONTAINER_REGISTRY -i $TAG_PRODUCTION:latest -e production -s staging_angular"
  only:
    - master
  environment:
    name: production
    url: $PRODUCTION_URL
